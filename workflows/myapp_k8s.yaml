parameters:
  rootpw:
    type: String
    lookup: myapp.rootpw
  db:
    type: String
    lookup: myapp.db
  dbuser:
    type: String
    lookup: myapp.dbuser
  dbpass:
    type: String[10]
    lookup: myapp.dbpass
  dbimage:
    type: String
    lookup: myapp.dbimage
  appimage:
    type: String
    lookup: myapp.appimage
returns:
  myapp_service: String
steps:
  namespace:
    returns:
      myapp_namespace: namespace_id
    Kubernetes::Namespace:
      metadata:
        name: myapp-ns
        labels:
          name: myapp-ns
  myappdb_deployment:
    parameters:
      - myapp_namespace
    returns:
      myappdb_id: deployment_id
    Kubernetes::Deployment:
      metadata:
        name: myapp-db
        namespace: $myapp_namespace
        labels:
          app: myapp-db
      spec:
        replicas: 1
        selector:
          match_labels:
            app: myapp-db
        template:
          metadata:
            labels:
              app: myapp-db
          spec:
            container:
            - env:
              - name: MYSQL_ROOT_PASSWORD
                value: $rootpw
              - name: MYSQL_DATABASE
                value: $db
              - name: MYSQL_USER
                value: $dbuser
              - name: MYSQL_PASSWORD
                value: $dbpass
              image: $dbimage
              name: myapp-db
              port:
              - container_port: 3306
                name: mysql
                protocol: TCP
  myappdb_service:
    parameters:
      - myappdb_id
    returns:
      myappdb_svc: service_id
    Kubernetes::Service:
      metadata:
        name: myapp-db-service
        namespace: $myapp_namespace
      spec:
        selector:
          app: myapp-db
        port:
          -
            protocol: TCP
            port: 3306
            target_port: '3306'
        type: NodePort
  myapp_deployment:
    parameters:
      - myappdb_svc
    returns:
      myapp_id: deployment_id
    Kubernetes::Deployment:
      metadata:
        name: myapp
        namespace: $myapp_namespace
        labels:
          app: myapp
      spec:
        replicas: 1
        selector:
          match_labels:
            app: myapp
        template:
          metadata:
            labels:
              app: myapp
          spec:
            container:
            - env:
              - name: MYSQL_DATABASE
                value: $db
              - name: MYSQL_USER
                value: $dbuser
              - name: MYSQL_PASSWORD
                value: $dbpass
              - name: MYSQL_SVC
                value: myapp-db-service
              image: $appimage
              name: myapp
              port:
              - container_port: 80
                name: http
                protocol: TCP
  myapp_service:
    parameters:
      - myapp_id
    returns:
      myapp_service: load_balancer_ingress
    Kubernetes::Service:
      metadata:
        name: myapp-service
        namespace: $myapp_namespace
      spec:
        selector:
          app: myapp
        port:
          -
            protocol: TCP
            port: 80
            target_port: '80'
        type: LoadBalancer
